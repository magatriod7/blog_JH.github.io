브라우저 렌더링
HTML 파일을 파싱하면서 Node의 정보를 만드는 Dom, Css의 정보를 가진 Cssom을 생성
Dom과 Cssom을 이용해서 render Tree 생성
노드의 크기, 위치 노드간의 관계의 정보를 가진 Layout 생성
Css를 바탕으로한 색칠을 하는 paint 과정 완료
Gps의 기능을 사용하는 Composition을 이용해 opacity나 transition 적용

script 위치 뒤에 두는 이유: 아직 파싱되지 않은 노드와 의존적일 수가 있어서
async를 이용해서 해결 가능

defer하면 해당 방법은 해결 불가능

preload 폰트같은 파일을 미리 받아온다

강제동기 레이아웃: node의 기하학적인 정보를 필요로할 때
강제동기 레이아웃이 일어나게된다. 즉 reflow가 계속 일어날 것이다.

브라우징 렌더링 최적화

reflow repaint 최소화
async defer
preload와 같은 것 사용

이벤트 루프

JS는 기본적으로 싱글 스레드 언어입니다. 즉, 한번에 한 작업만 할 수 있다는 이야기 입니다.
하지만 JS는 비동기언어로 동시에 여러 작업을 할 수 있습니다. 이것이 가능한 것은 이벤트 루프 덕입니다.

비동기처리 코드가 나타다면 해당 스택을 웹 API에서 처리합니다. 웹 API에서 처리된
스택들은 다시 콜 스택에 쌓이게 되는데 이 때 바로 쌓이는 것이 아니라
콜백 큐에 잠시 스택을 보관한 후에 콜 스택이 완전히 비워지게 되면
이벤트 루프가 이를 판단하여 콜 스택에 콜백 큐의 스택을 쌓게됩니다.

변수와 메모리

JS에서 변수는 변수 영역에서 변수의 이름과 변수의 값이 저장된 데이터 영역 주소가 저장되어 있습니다.
만약 원시형 데이터가 아닌 객체 데이터일 경우 해당 객체 변수의 데이터 영역의 값은
객체가 참조하는 데이터의 변수 영역 데이터가 저장되어 있습니다.

실행 컨텍스트

실행 컨텍스트에는 함수 실행 컨텍스트와 전역 실행 컨텍스트로 나뉘게 됩니다.
각 실행 컨텍스트가 생성되면 생성단계와 실행단계로 나뉘는데 먼저
생성단계에서는 해당 컨텍스트에서 사용될 변수의 정보를 가진 변수 객체를 생성합니다.
그 후 해당 컨텍스트의 외부의 변수 객체를 사용하기 위해 스코프 체인을 생성합니다.
마지막으로 this를 정의합니다.

생성 단계가 완료되면 콜스택에 실행단계가 되어 콜 스택 가장 위에 쌓이게 됩니다.

symbol: 객체 내부 항목을 숨길 때 사용 가능